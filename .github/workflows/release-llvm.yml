name: Release LLVM

on:
  push:
    tags:
      - "llvm*"

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: create release
        uses: softprops/action-gh-release@v2
        with:
          name: "LLVM binaries release: ${{ github.ref_name }}"
          body: "This release includes binaries of LLVM, used to compile revive itself"
          make_latest: false

  build-macos:
    strategy:
      matrix:
        os: [macos-14, macos-13]
        include:
          - os: macos-13
            arch: x64
          - os: macos-14
            arch: arm64
    needs: create-release
    runs-on: ${{ matrix.os }}
    name: "build-macos-${{ matrix.arch }}"
    env:
      RUST_LOG: trace
    steps:
      - uses: actions/checkout@v4

      - name: install macos deps
        run: |
          brew install ninja

      - name: versions
        run: |
          rustup show
          cargo --version
          cmake --version
          echo "bash:" && bash --version
          echo "ninja:" && ninja --version
          echo "clang:" && clang --version

      - name: Build LLVM
        run: |
          make install-llvm

      - name: clean
        # check removed files
        run: |
          cd target-llvm/gnu/target-final/bin/
          rm diagtool llvm-libtool-darwin llvm-lipo llvm-pdbutil llvm-dwarfdump llvm-nm llvm-readobj llvm-cfi-verify \
             sancov llvm-debuginfo-analyzer llvm-objdump llvm-profgen llvm-extract llvm-jitlink llvm-c-test llvm-gsymutil llvm-dwp \
             dsymutil llvm-dwarfutil llvm-exegesis lli clang-rename bugpoint clang-extdef-mapping clang-refactor c-index-test \
             llvm-reduce llvm-lto clang-linker-wrapper llc llvm-lto2

      - name: package artifacts
        run: |
          tar -cf "${{ github.ref_name }}-macos-${{ matrix.arch }}.tar.gz" target-llvm/gnu/target-final

      - name: upload archive to release
        uses: softprops/action-gh-release@v2
        with:
          make_latest: false
          files: |
            ${{ github.ref_name }}-macos-${{ matrix.arch }}.tar.gz


  build-linux-all:
    needs: create-release
    runs-on: parity-large
#    runs-on: ubuntu-latest
    env:
      RUST_LOG: trace
    steps:
      - uses: actions/checkout@v4

      - name: install linux deps
        run: |
          sudo apt-get update && sudo apt-get install -y cmake ninja-build curl git libssl-dev pkg-config clang lld musl

      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rust-src
          target: wasm32-unknown-emscripten

      - name: versions
        run: |
          rustup show
          cargo --version
          cmake --version
          echo "bash:" && bash --version
          echo "ninja:" && ninja --version
          echo "clang:" && clang --version

      - name: Build host LLVM
        run: |
          make install-llvm

      - name: Build musl LLVM
        run: |
          revive-llvm --target-env musl clone
          revive-llvm --target-env musl build --llvm-projects lld --llvm-projects clang

      - name: Build emscripten LLVM
        run: |
          revive-llvm --target-env emscripten clone
          source emsdk/emsdk_env.sh
          revive-llvm --target-env emscripten build --llvm-projects lld

      - name: clean
        # check removed files
        run: |
          for target in emscripten musl; do
            cd target-llvm/${target}/target-final/bin/
            rm -rf diagtool llvm-libtool-darwin llvm-lipo llvm-pdbutil llvm-dwarfdump llvm-nm llvm-readobj llvm-cfi-verify \
               sancov llvm-debuginfo-analyzer llvm-objdump llvm-profgen llvm-extract llvm-jitlink llvm-c-test llvm-gsymutil llvm-dwp \
               dsymutil llvm-dwarfutil llvm-exegesis lli clang-rename bugpoint clang-extdef-mapping clang-refactor c-index-test \
               llvm-reduce llvm-lto clang-linker-wrapper llc llvm-lto2
            cd -
          done

      - name: package artifacts
        run: |
          tar -cf "${{ github.ref_name }}-linux.tar.gz" target-llvm/emscripten/target-final target-llvm/musl/target-final

      - name: upload archive to release
        uses: softprops/action-gh-release@v2
        with:
          make_latest: false
          files: |
            ${{ github.ref_name }}-linux.tar.gz

#  build-windows-gnu:
#    needs: create-release
#    runs-on: windows-latest
#    env:
##      MSYSTEM: "MINGW"
#      RUST_LOG: trace
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: install win deps
#        run: |
#          choco install ninja
#
#      - name: Setup msys2
#        id: msys2
#        uses: msys2/setup-msys2@v2
#        with:
#          path-type: inherit
#          install: >-
#            base-devel
#            git
#            cmake
#            llvm
#            clang
#            lld
##            mingw-w64-x86_64-clang
##            mingw-w64-x86_64-lld
##            mingw-w64-x86_64-rust
##            mingw-w64-x86_64-cmake
##            mingw-w64-x86_64-gcc
##            mingw-w64-x86_64-gcc-libs
##            mingw-w64-x86_64-python
##            mingw-w64-clang-x86_64-riscv64-unknown-elf-toolchain
#
#      - name: Prepare env
#        shell: "msys2 {0}"
#        run: |
#          echo "/c/Users/runneradmin/.cargo/bin" >> "${GITHUB_PATH}"
#
#      - name: versions
#        shell: "msys2 {0}"
#        run: |
#          rustup show
#          cargo --version
#          cmake --version
#          ninja --version
#
#      - name: Build LLVM
#        shell: "msys2 {0}"
#        env:
#          VERBOSE: 1
#          LIBSTDCPP_SOURCE_PATH: "${{ steps.msys2.outputs.msys2-location }}/mingw64/lib/libstdc++.a"
#        run: |
#          make install-llvm || true
#
#      - name: upload ABI
#        uses: actions/upload-artifact@v4
#        with:
#          name: ABIs
#          path: |
#            target-llvm/**/CMakeDetermineCompilerABI*.bin
#
#      - name: clean
#        # check removed files
#        shell: "msys2 {0}"
#        run: |
#          cd target-llvm/gnu/target-final/bin/ && \
#          rm -rf diagtool.exe llvm-libtool-darwin.exe llvm-lipo.exe llvm-pdbutil.exe llvm-dwarfdump.exe llvm-nm.exe llvm-readobj.exe llvm-cfi-verify.exe \
#             sancov.exe llvm-debuginfo-analyzer.exe llvm-objdump.exe llvm-profgen.exe llvm-extract.exe llvm-jitlink.exe llvm-c-test.exe llvm-gsymutil.exe llvm-dwp.exe \
#             dsymutil.exe llvm-dwarfutil.exe llvm-exegesis.exe lli.exe clang-rename.exe bugpoint.exe clang-extdef-mapping.exe clang-refactor.exe c-index-test.exe \
#             llvm-reduce.exe llvm-lto.exe clang-linker-wrapper.exe llc.exe llvm-lto2.exe
#
#      - name: measure artifacts
#        shell: "msys2 {0}"
#        run: |
#          du -h target-llvm/gnu/target-final/bin/*
#
#      - name: package artifacts
#        run: |
#          tar -cf "${{ github.ref_name }}-windows-gnu.tar.gz" target-llvm/gnu/target-final
#
#      - name: upload archive to release
#        uses: softprops/action-gh-release@v2
#        with:
#          make_latest: false
#          files: |
#            ${{ github.ref_name }}-windows-gnu.tar.gz
